M <- cor(stock_df[,4:7])
corrplot(M, method="circle")
sample_size = floor(0.8*nrow(stock_df))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(stock_df)),size = sample_size)
train_stock_df =stock_df[picked,]
test_stock_df =stock_df[-picked,]
train_stock <- train_stock_df%>%select(Volume,sentiment_score,sentiment_common)
test_stock <- test_stock_df%>%select(Volume,sentiment_score,sentiment_common)
train_target <- train_stock_df%>%select(target)
test_target <- test_stock_df%>%select(target)
train_data <- scale(train_stock)
col_means_train <- attr(train_data, "scaled:center")
col_stddevs_train <- attr(train_data, "scaled:scale")
test_data <- scale(test_stock, center = col_means_train, scale = col_stddevs_train)
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu",
input_shape = dim(train_data)[2]) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list("mean_absolute_error")
)
model
}
model <- build_model()
model %>% summary()
train_target <- data.matrix(train_target)
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
epochs <- 1000
# Fit the model and store training stats
history <- model %>% fit(
train_data,
train_target,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
library(ggplot2)
plot(history, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
test_target <- data.matrix(test_target)
c(loss, mae) %<-% (model %>% evaluate(test_data, test_target, verbose = 0))
paste0("Mean absolute error on test set: $", sprintf("%.2f", mae ))
test_predictions <- model %>% predict(test_data)
a <- as.data.frame(x = test_predictions[ , 1])
results <- a%>%mutate(actual = test_target)%>%mutate(prediction = test_predictions[ , 1]) %>% mutate(accuracy= 100 -((abs((actual-prediction)/actual))*100))%>% select(actual,prediction,accuracy)
results <- results%>%filter(actual!=0)
results%>%filter(accuracy<90)
actual_preds <- results[,-1]
correlation_accuracy <- cor(actuals_preds)
summary(results$accuracy)
correlation_accuracy
actual_preds
actual_preds <- results[1:2]
correlation_accuracy <- cor(actuals_preds)
actual_preds
correlation_accuracy
actual_preds
summary(results$accuracy)
summary(results$accuracy)
metric_results <- actual_preds %>%
mae(actual, prediction)
library("metrics")
install.packages("metrics")
install.packages("Metrics")
library("Metrics")
metric_results <- actual_preds %>%
mae(actual, prediction)
mae(68.9000,138.96092)
library("Metrics")
metric_results <- actual_preds %>%mutate(MAE =   mae(actual, prediction))
metric_results
summary(results$MAE)
summary(metric_results$MAE)
mae(68.770000, 69.76176)
metric_results
mae(68.900002, 138.96092)
metric_results
actual_preds
library("Metrics")
metric_results <- actual_preds %>%mutate(MAE = mae(actual_preds$actual,actual_preds$prediction))
metric_results
library("Metrics")
metric_results <- actual_preds %>%mutate(Check = mae(actual, prediction))
metric_results
library("Metrics")
metric_results <- actual_preds %>%mutate(MAE = mae(prediction, actual))
metric_results
library("Metrics")
metric_results <- actual_preds %>%mutate(MAE = rmse(prediction, prediction))
metric_results
library("Metrics")
metric_results <- actual_preds %>%mutate(MAE = mae(prediction, prediction))
metric_results
mae(actual_preds,actual,prediction)
mae(actual_preds,actual)
library("Metrics")
metric_results <- actual_preds %>%mutate(MAE = mae(prediction, prediction))
mae(actual,prediction)
mae(actual_pred$actual,actual_pred$prediction)
mae(actual_preds$actual,actual_preds$prediction)
stock_df <- read.csv("Final_data_na_filtered")
stock_df <- stock_df[,3:11]
head(stock_df)
x <- stock_df$sentiment_score
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
library(corrplot)
M <- cor(stock_df[,4:8])
corrplot(M, method="circle")
stock_df <- stock_df%>%mutate(stock_val = (High+Low)/2)
library(keras)
stock_df <- stock_df%>%select(Date,company_name,company_name_full,stock_val,Volume,target)
stock_df <- stock_df%>%filter(target!=0)
stock_df
library(corrplot)
M <- cor(stock_df[,4:6])
corrplot(M, method="circle")
sample_size = floor(0.8*nrow(stock_df))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(stock_df)),size = sample_size)
train_stock_df =stock_df[picked,]
test_stock_df =stock_df[-picked,]
train_stock <- train_stock_df%>%select(stock_val,Volume)
test_stock <- test_stock_df%>%select(stock_val,Volume)
train_target <- train_stock_df%>%select(target)
test_target <- test_stock_df%>%select(target)
train_data <- scale(train_stock)
col_means_train <- attr(train_data, "scaled:center")
col_stddevs_train <- attr(train_data, "scaled:scale")
test_data <- scale(test_stock, center = col_means_train, scale = col_stddevs_train)
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu",
input_shape = dim(train_data)[2]) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list("mean_absolute_error")
)
model
}
model <- build_model()
model %>% summary()
train_target <- data.matrix(train_target)
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
epochs <- 300
# Fit the model and store training stats
history <- model %>% fit(
train_data,
train_target,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
library(ggplot2)
plot(history, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
test_target <- data.matrix(test_target)
c(loss, mae) %<-% (model %>% evaluate(test_data, test_target, verbose = 0))
paste0("Mean absolute error on validation set: $", sprintf("%.2f", mae ))
test_predictions <- model %>% predict(test_data)
a <- as.data.frame(x = test_predictions[ , 1])
results <- a%>%mutate(actual = test_target)%>%mutate(prediction = test_predictions[ , 1]) %>% mutate(accuracy=100 - abs(((actual-prediction)/actual)*100))%>% select(actual,prediction,accuracy)
results_check <- results%>%filter(actual!=0)
results%>%filter(accuracy<90)
summary(results$accuracy)
mae(results$actual,results$prediction)
results
results
results
mae(results$actual,results$prediction)
summary(results$accuracy)
library(ggplot2)
plot(history, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
test_target <- data.matrix(test_target)
c(loss, mae) %<-% (model %>% evaluate(test_data, test_target, verbose = 0))
paste0("Mean absolute error on validation set: $", sprintf("%.2f", mae ))
stock_df <- read.csv("Final_data_with_reddit.csv")
stock_df <- stock_df[,3:11]
head(stock_df)
x <- stock_df$sentiment_score
h<-hist(x, breaks=2, col="red", xlab="Sentiment",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
stock_df <- read.csv("Final_data_na_filtered")
stock_df <- stock_df[,3:11]
head(stock_df)
x <- stock_df$sentiment_score
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
library(corrplot)
M <- cor(stock_df[,4:8])
corrplot(M, method="circle")
stock_df <- stock_df%>%mutate(stock_val = (High+Low)/2)
library(keras)
stock_df <- stock_df%>%select(Date,company_name,company_name_full,stock_val,Volume,sentiment_score,sentiment_common,target)
stock_df <- stock_df%>%filter(target!=0)
stock_df
library(corrplot)
M <- cor(stock_df[,4:8])
corrplot(M, method="circle")
sample_size = floor(0.8*nrow(stock_df))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(stock_df)),size = sample_size)
train_stock_df =stock_df[picked,]
test_stock_df =stock_df[-picked,]
train_stock <- train_stock_df%>%select(stock_val,Volume,sentiment_score,sentiment_common)
test_stock <- test_stock_df%>%select(stock_val,Volume,sentiment_score,sentiment_common)
train_target <- train_stock_df%>%select(target)
test_target <- test_stock_df%>%select(target)
train_data <- scale(train_stock)
col_means_train <- attr(train_data, "scaled:center")
col_stddevs_train <- attr(train_data, "scaled:scale")
test_data <- scale(test_stock, center = col_means_train, scale = col_stddevs_train)
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu",
input_shape = dim(train_data)[2]) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list("mean_absolute_error")
)
model
}
model <- build_model()
model %>% summary()
train_target <- data.matrix(train_target)
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
epochs <- 300
# Fit the model and store training stats
history <- model %>% fit(
train_data,
train_target,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
library(ggplot2)
plot(history, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
c(loss, mae) %<-% (model %>% evaluate(valid_data, valid_target, verbose = 0))
c(loss, mae) %<-% (model %>% evaluate(test_data, test_target, verbose = 0))
test_target <- data.matrix(test_target)
c(loss, mae) %<-% (model %>% evaluate(test_data, test_target, verbose = 0))
paste0("Mean absolute error on validation set: $", sprintf("%.2f", mae ))
stock_df <- read.csv("Final_data_na_filtered")
stock_df <- stock_df[,3:11]
head(stock_df)
x <- stock_df$sentiment_score
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
library(corrplot)
M <- cor(stock_df[,4:8])
corrplot(M, method="circle")
stock_df <- stock_df%>%mutate(stock_val = (High+Low)/2)
library(keras)
stock_df <- stock_df%>%select(Date,company_name,company_name_full,stock_val,Volume,sentiment_score,target)
stock_df <- stock_df%>%filter(target!=0)
stock_df
library(corrplot)
M <- cor(stock_df[,4:7])
corrplot(M, method="circle")
sample_size = floor(0.8*nrow(stock_df))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(stock_df)),size = sample_size)
train_stock_df =stock_df[picked,]
test_stock_df =stock_df[-picked,]
train_stock <- train_stock_df%>%select(stock_val,Volume,sentiment_score)
test_stock <- test_stock_df%>%select(stock_val,Volume,sentiment_score)
train_target <- train_stock_df%>%select(target)
test_target <- test_stock_df%>%select(target)
train_data <- scale(train_stock)
col_means_train <- attr(train_data, "scaled:center")
col_stddevs_train <- attr(train_data, "scaled:scale")
test_data <- scale(test_stock, center = col_means_train, scale = col_stddevs_train)
build_model <- function() {
model <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu",
input_shape = dim(train_data)[2]) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list("mean_absolute_error")
)
model
}
model <- build_model()
model %>% summary()
train_target <- data.matrix(train_target)
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 80 == 0) cat("\n")
cat(".")
}
)
epochs <- 300
# Fit the model and store training stats
history <- model %>% fit(
train_data,
train_target,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
library(ggplot2)
plot(history, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
test_target <- data.matrix(test_target)
c(loss, mae) %<-% (model %>% evaluate(test_data, test_target, verbose = 0))
paste0("Mean absolute error on validation set: $", sprintf("%.2f", mae ))
test_target <- data.matrix(test_target)
c(loss, mae) %<-% (model %>% evaluate(test_data, test_target, verbose = 0))
paste0("Mean absolute error on validation set: $", sprintf("%.2f", mae ))
stock_df <- read.csv("Final_data_with_reddit.csv")
stock_df <- stock_df[,3:11]
head(stock_df)
stock_df <- stock_df%>%mutate(stock_val = (High+Low)/2)
stock_df <- stock_df%>%select(Date,company_name,company_name_full,stock_val,Volume,sentiment_score,sentiment_common,target)
stock_df
stock_df$Date <- as.Date(stock_df$Date)
sample_size = floor(0.8*nrow(stock_df))
set.seed(777)
train_stock_df = stock_df%>%filter(Date<'2014-01-01')
test_stock_df = stock_df%>%filter(Date>='2014-01-01')
train_stock <- train_stock_df%>%select(stock_val,Volume,sentiment_score,sentiment_common)
test_stock <- test_stock_df%>%select(stock_val,Volume,sentiment_score,sentiment_common)
train_target <- train_stock_df%>%select(target)
test_target <- test_stock_df%>%select(target)
train_data <- scale(train_stock)
col_means_train <- attr(train_data, "scaled:center")
col_stddevs_train <- attr(train_data, "scaled:scale")
test_data <- scale(test_stock, center = col_means_train, scale = col_stddevs_train)
train_data <- as.data.frame(train_stock)
test_data <- as.data.frame(train_stock)
sample_size = floor(0.8*nrow(stock_df))
set.seed(777)
train_stock_df = plotting_df%>%filter(Date<'2014-01-01')
test_stock_df = plotting_df%>%filter(Date>='2014-01-01')
linear_model <- lm(target ~ stock_val+log(1/Volume)+sentiment_score+sentiment_common, data=train_stock_df)  # build linear regression model on full data
print(linear_model)
summary(linear_model)
predicted <- predict(linear_model,test_stock_df)
actuals_preds <- data.frame(cbind(actuals=test_stock_df$target, predicteds=predicted))
actuals_preds
correlation_accuracy <- cor(actuals_preds)
mae(actuals_preds$actual,actuals_preds$prediction)
correlation_accuracy
mae(actuals_preds$actual,actuals_preds$predicteds)
library(class)
library(LiblineaR)
library(e1071)
SVR_model <- svm(target ~ stock_val+log(1/Volume)+sentiment_score+sentiment_common, data=train_stock_df)  # build linear regression model on full data
print(SVR_model)
pred_svr <- predict(SVR_model,test_stock_df)
actuals_preds_svr <- data.frame(cbind(actuals=test_stock_df$target, predicteds=pred_svr))
actuals_preds_svr
correlation_accuracy_svr <- cor(actuals_preds_svr)
mae(actuals_preds_svr$actual,actuals_preds_svr$predicteds)
company_accuracy
#predicted <- as.list(pred_out)
actual <- as.list(test_y)
a <- as.data.frame(test_y)
tbl_1 <- a %>%
mutate(predicted = pred_out)
results <- tbl_1%>% mutate(accuracy=100 - abs(((target-predicted)/target)*100))%>% select(target,predicted,accuracy)
results <- results%>%filter(actual!=0)
summary(results$accuracy)
plot(pred_out, metrics = "mean_absolute_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
model
#predicted <- as.list(pred_out)
actual <- as.list(test_y)
a <- as.data.frame(test_y)
tbl_1 <- a %>%
mutate(predicted = pred_out)
results <- tbl_1%>% mutate(accuracy=100 - abs(((target-predicted)/target)*100))%>% select(target,predicted,accuracy)
results <- results%>%filter(actual!=0)
summary(results$accuracy)
results
mae(results$target,results$predicted)
company_accuracy%>%
ggplot() +
geom_bar(aes(x = company_name, y = group_accuracy), color = "darkred",stat = "identity")+
xlab('Company Name') +
ylab('Mean Accuracy')+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
Walgreen %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-Walgreen')
IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')
IBM %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred")+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-IBM')
Apple %>%
ggplot() +
geom_line(aes(x = Date, y = target), color = "darkred",alpha = 0.5)+
geom_line(aes(x = Date, y = predicted), color="steelblue", linetype="twodash") +
xlab('Dates') +
ylab('Stock Price-Apple')
M <- cor(stock_df[,4:8])
corrplot(M, method="circle")
